[
  {
    "title": "Implementing Dynamic Array from Scratch in C",
    "date": "Sep 6, 2025",
    "content": "<p>In this tutorial, we will implement a <strong>dynamic array</strong> in C from scratch. Dynamic arrays allow resizing during runtime, unlike static arrays which have a fixed size. This is essential when you don't know the number of elements in advance.</p>\n<h2>1. Understanding Dynamic Arrays</h2>\n<p>A dynamic array is essentially an array that can grow or shrink in size. We achieve this using <code>malloc</code>, <code>realloc</code>, and <code>free</code> in C.</p>\n<h2>2. Basic Structure</h2>\n<p>We need to store two things:</p>\n<ul>\n  <li>The <strong>array pointer</strong> (to the actual data)</li>\n  <li>The <strong>current capacity</strong> (how many elements it can hold)</li>\n  <li>The <strong>current size</strong> (how many elements are actually stored)</li>\n</ul>\n<h2>3. Implementation</h2>\n<pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\ntypedef struct {\n    int *data;\n    size_t size;\n    size_t capacity;\n} DynamicArray;\n\n// Initialize the array\nvoid initArray(DynamicArray *arr, size_t capacity) {\n    arr-&gt;data = malloc(capacity * sizeof(int));\n    arr-&gt;size = 0;\n    arr-&gt;capacity = capacity;\n}\n\n// Append element to array\nvoid append(DynamicArray *arr, int value) {\n    if (arr-&gt;size == arr-&gt;capacity) {\n        arr-&gt;capacity *= 2;\n        arr-&gt;data = realloc(arr-&gt;data, arr-&gt;capacity * sizeof(int));\n    }\n    arr-&gt;data[arr-&gt;size++] = value;\n}\n\n// Free memory\nvoid freeArray(DynamicArray *arr) {\n    free(arr-&gt;data);\n    arr-&gt;data = NULL;\n    arr-&gt;size = arr-&gt;capacity = 0;\n}\n\nint main() {\n    DynamicArray arr;\n    initArray(&arr, 2);\n\n    append(&arr, 10);\n    append(&arr, 20);\n    append(&arr, 30); // automatically resized\n\n    for (size_t i = 0; i &lt; arr.size; i++) {\n        printf(\"%d \", arr.data[i]);\n    }\n\n    freeArray(&arr);\n    return 0;\n}\n</code></pre>\n<h2>4. How It Works</h2>\n<p>When the array reaches its capacity, we double the capacity using <code>realloc</code>. This ensures <strong>amortized O(1) append</strong>. Always remember to <code>free</code> the allocated memory to avoid memory leaks.</p>\n<h2>5. Tips</h2>\n<ul>\n  <li>Use <code>size_t</code> for array sizes.</li>\n  <li>Check the result of <code>malloc</code> and <code>realloc</code> for NULL to handle allocation failure.</li>\n  <li>Dynamic arrays are the foundation for other data structures like stacks, queues, and vectors.</li>\n</ul>\n<p>This implementation gives you a basic, reusable dynamic array in C!</p>"
  },
  {
    "title": "Twerk 1O1, How to twerk in space.",
    "date": "Sep 2, 2025",
    "content": "<p>Steps:</p> <li>Shake your booty</li>"
  }
]

