[
	{
		"title": "Implementing Dynamic Array from Scratch in C",
		"date": "Sep 6, 2025",
		"content": "
		<p>In this tutorial, we will implement a <strong>dynamic array</strong> in C from scratch. Dynamic arrays allow resizing during runtime, unlike static arrays which have a fixed size. This is essential when you don't know the number of elements in advance.</p>

<h2>1. Understanding Dynamic Arrays</h2>
<p>A dynamic array is essentially an array that can grow or shrink in size. We achieve this using <code>malloc</code>, <code>realloc</code>, and <code>free</code> in C.</p>

<h2>2. Basic Structure</h2>
<p>We need to store two things:</p>
<ul>
  <li>The <strong>array pointer</strong> (to the actual data)</li>
  <li>The <strong>current capacity</strong> (how many elements it can hold)</li>
  <li>The <strong>current size</strong> (how many elements are actually stored)</li>
</ul>

<h2>3. Implementation</h2>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

typedef struct {
    int *data;
    size_t size;
    size_t capacity;
} DynamicArray;

// Initialize the array
void initArray(DynamicArray *arr, size_t capacity) {
    arr-&gt;data = malloc(capacity * sizeof(int));
    arr-&gt;size = 0;
    arr-&gt;capacity = capacity;
}

// Append element to array
void append(DynamicArray *arr, int value) {
    if (arr-&gt;size == arr-&gt;capacity) {
        arr-&gt;capacity *= 2;
        arr-&gt;data = realloc(arr-&gt;data, arr-&gt;capacity * sizeof(int));
    }
    arr-&gt;data[arr-&gt;size++] = value;
}

// Free memory
void freeArray(DynamicArray *arr) {
    free(arr-&gt;data);
    arr-&gt;data = NULL;
    arr-&gt;size = arr-&gt;capacity = 0;
}

int main() {
    DynamicArray arr;
    initArray(&arr, 2);

    append(&arr, 10);
    append(&arr, 20);
    append(&arr, 30); // automatically resized

    for (size_t i = 0; i &lt; arr.size; i++) {
        printf("%d ", arr.data[i]);
    }

    freeArray(&arr);
    return 0;
}
</code></pre>

<h2>4. How It Works</h2>
<p>When the array reaches its capacity, we double the capacity using <code>realloc</code>. This ensures <strong>amortized O(1) append</strong>. Always remember to <code>free</code> the allocated memory to avoid memory leaks.</p>

<h2>5. Tips</h2>
<ul>
  <li>Use <code>size_t</code> for array sizes.</li>
  <li>Check the result of <code>malloc</code> and <code>realloc</code> for NULL to handle allocation failure.</li>
  <li>Dynamic arrays are the foundation for other data structures like stacks, queues, and vectors.</li>
</ul>

<p>This implementation gives you a basic, reusable dynamic array in C!</p>
		"
	}
]
